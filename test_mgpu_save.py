from keras.models import Sequential
from keras.layers import Conv2D,Activation,MaxPooling2D,Dropout,SpatialDropout2D,Flatten,Dense
from keras.datasets import cifar10
from keras.utils import multi_gpu_model,to_categorical
from keras.preprocessing.image import ImageDataGenerator
import numpy as np


(x_train, y_train), (x_test, y_test) = cifar10.load_data()

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')

x_train /= np.max(x_train)
print "x_train range:", np.min(x_train), np.max(x_train)
x_test /= np.max(x_train)
print "x_test range:", np.min(x_train), np.max(x_train)

y_train = to_categorical(y_train,num_classes=10)
y_test = to_categorical(y_test,num_classes=10)

ngpus = 1
num_classes = 10

model = Sequential()

model.add(Conv2D(64, (3, 3), padding='same',input_shape=x_train.shape[1:]))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(SpatialDropout2D(0.25))

model.add(Conv2D(128, (3, 3), padding='same'))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(SpatialDropout2D(0.25))

model.add(Conv2D(256, (3, 3), padding='same'))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(SpatialDropout2D(0.25))


model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.25))
model.add(Dense(num_classes))
model.add(Activation('softmax'))


# ------------------- pass the the template model to gpu ---------------------
model_single = model

if ngpus > 1:
    model = multi_gpu_model(model,ngpus)

model.compile(loss='categorical_crossentropy',
              optimizer='adadelta',
              metrics=['accuracy'])



# Fit the model on the batches generated by datagen.flow().
model.fit(x=x_train,y=y_train,batch_size=1024,epochs=25,validation_data=(x_test,y_test))

score = model.evaluate(x_test, y_test, verbose=0)
print('Test score:', score[0])
print('Test accuracy:', score[1])


model_single.save_weights("model.h5")
print("Saved model to disk")

# -------------- create exactly same model and load the saved weights --------------
loaded_model = Sequential()

loaded_model.add(Conv2D(64, (3, 3), padding='same',input_shape=x_train.shape[1:]))
loaded_model.add(Activation('relu'))
loaded_model.add(MaxPooling2D(pool_size=(2, 2)))
loaded_model.add(SpatialDropout2D(0.25))

loaded_model.add(Conv2D(128, (3, 3), padding='same'))
loaded_model.add(Activation('relu'))
loaded_model.add(MaxPooling2D(pool_size=(2, 2)))
loaded_model.add(SpatialDropout2D(0.25))

loaded_model.add(Conv2D(256, (3, 3), padding='same'))
loaded_model.add(Activation('relu'))
loaded_model.add(MaxPooling2D(pool_size=(2, 2)))
loaded_model.add(SpatialDropout2D(0.25))


loaded_model.add(Flatten())
loaded_model.add(Dense(512))
loaded_model.add(Activation('relu'))
loaded_model.add(Dropout(0.25))
loaded_model.add(Dense(num_classes))
loaded_model.add(Activation('softmax'))

# load weights into new model

# compile loaded model
loaded_model.compile(loss='categorical_crossentropy',
                     optimizer='adadelta',
                     metrics=['accuracy'])

loaded_model.load_weights("model.h5")

print("Loaded model from disk")


score = loaded_model.evaluate(x_test, y_test, verbose=0)
print('Test score:', score[0])
print('Test accuracy:', score[1])
